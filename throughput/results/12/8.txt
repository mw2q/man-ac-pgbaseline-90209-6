BEGIN;
BEGIN
EXPLAIN (ANALYZE, BUFFERS)
select
	o_year,
	sum(case
		when nation = 'UNITED KINGDOM' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'EUROPE'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'PROMO BURNISHED STEEL'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2226226.48..2226228.30 rows=731 width=38) (actual time=28219.320..28219.320 rows=2 loops=1)
   Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
   Sort Method: quicksort  Memory: 25kB
   Buffers: shared hit=778798 read=220454 dirtied=1104 written=513
   ->  HashAggregate  (cost=2226178.91..2226191.70 rows=731 width=38) (actual time=28219.257..28219.259 rows=2 loops=1)
         Buffers: shared hit=778795 read=220454 dirtied=1104 written=513
         ->  Nested Loop  (cost=497993.26..2225672.61 rows=25315 width=38) (actual time=20935.558..28161.071 rows=24255 loops=1)
               Buffers: shared hit=778795 read=220454 dirtied=1104 written=513
               ->  Nested Loop  (cost=497993.26..2218452.77 rows=25315 width=16) (actual time=20935.495..28013.214 rows=24255 loops=1)
                     Buffers: shared hit=730285 read=220454 dirtied=1104 written=513
                     ->  Hash Join  (cost=497993.26..2211080.97 rows=25315 width=16) (actual time=20935.453..27709.729 rows=24255 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Buffers: shared hit=657393 read=220454 dirtied=1104 written=513
                           ->  Nested Loop  (cost=0.00..1710749.62 rows=416989 width=16) (actual time=0.401..5531.690 rows=395984 loops=1)
                                 Buffers: shared hit=264991 read=199255 dirtied=1104 written=513
                                 ->  Index Only Scan using part_p_type_p_partkey_idx on part  (cost=0.00..47790.19 rows=13820 width=4) (actual time=0.310..226.212 rows=13188 loops=1)
                                       Index Cond: (p_type = 'PROMO BURNISHED STEEL'::text)
                                       Heap Fetches: 13188
                                       Buffers: shared read=11396 written=36
                                 ->  Index Scan using lineitem_l_partkey_l_quantity_l_shipmode_idx on lineitem  (cost=0.00..120.02 rows=31 width=20) (actual time=0.038..0.388 rows=30 loops=13188)
                                       Index Cond: (l_partkey = part.p_partkey)
                                       Buffers: shared hit=264991 read=187859 dirtied=1104 written=477
                           ->  Hash  (cost=486542.08..486542.08 rows=916094 width=8) (actual time=20933.665..20933.665 rows=913799 loops=1)
                                 Buckets: 131072  Batches: 1  Memory Usage: 35696kB
                                 Buffers: shared hit=392399 read=21199
                                 ->  Hash Join  (cost=136710.35..486542.08 rows=916094 width=8) (actual time=4422.110..19704.467 rows=913799 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       Buffers: shared hit=392399 read=21199
                                       ->  Bitmap Heap Scan on orders  (cost=97679.73..421173.76 rows=4580469 width=12) (actual time=2995.225..6726.536 rows=4561664 loops=1)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             Buffers: shared hit=261097 read=6324
                                             ->  Bitmap Index Scan on orders_o_orderdate_o_orderkey_idx  (cost=0.00..96534.61 rows=4580469 width=0) (actual time=2832.571..2832.571 rows=4584480 loops=1)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   Buffers: shared hit=6310 read=6324
                                       ->  Hash  (cost=35280.62..35280.62 rows=300000 width=4) (actual time=1426.585..1426.585 rows=300963 loops=1)
                                             Buckets: 32768  Batches: 1  Memory Usage: 10581kB
                                             Buffers: shared hit=131302 read=14875
                                             ->  Nested Loop  (cost=906.17..35280.62 rows=300000 width=4) (actual time=33.017..1240.143 rows=300963 loops=1)
                                                   Buffers: shared hit=131302 read=14875
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.039..0.099 rows=5 loops=1)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         Buffers: shared hit=2
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.008..0.024 rows=25 loops=1)
                                                               Buffers: shared hit=1
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.015..0.015 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               Buffers: shared hit=1
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                                                                     Filter: (r_name = 'EUROPE'::bpchar)
                                                                     Rows Removed by Filter: 4
                                                                     Buffers: shared hit=1
                                                   ->  Bitmap Heap Scan on customer  (cost=905.09..6455.63 rows=60000 width=8) (actual time=29.049..232.283 rows=60193 loops=5)
                                                         Recheck Cond: (c_nationkey = n1.n_nationkey)
                                                         Buffers: shared hit=131300 read=14875
                                                         ->  Bitmap Index Scan on customer_c_nationkey_c_custkey_idx  (cost=0.00..890.09 rows=60000 width=0) (actual time=19.364..19.364 rows=60193 loops=5)
                                                               Index Cond: (c_nationkey = n1.n_nationkey)
                                                               Buffers: shared hit=6 read=833
                     ->  Index Scan using pk_supplier on supplier  (cost=0.00..0.28 rows=1 width=8) (actual time=0.010..0.011 rows=1 loops=24255)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
                           Buffers: shared hit=72892
               ->  Index Scan using pk_nation on nation n2  (cost=0.00..0.27 rows=1 width=30) (actual time=0.003..0.004 rows=1 loops=24255)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
                     Buffers: shared hit=48510
 Total runtime: 28233.934 ms
(64 rows)

COMMIT;
COMMIT
